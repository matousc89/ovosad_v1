"""


"""
import glob

import cv2
import numpy as np
import matplotlib.pylab as plt


class VideoLoader():

    def __init__(self, file_name):
        self.cap = cv2.VideoCapture(file_name)

    def read_next(self):
        ret, frame = self.cap.read()
        return frame

        #cap.isOpened()


class PictureLoader():

    def __init__(self, folder_path):
        self.pictures = list(glob.glob("{}/*.npy".format(folder_path)))

    def read_next(self):
        frame = np.load(self.pictures[0])
        print(self.pictures[0])
        del self.pictures[0]
        return frame


def scale_rgb(img):
    FOV_DIFF_X = int(round((X_RGB - ((FOV_DEPTH[0] / FOV_RGB[0]) * X_RGB)) / 2))
    FOV_DIFF_Y = int(round((Y_RGB - ((FOV_DEPTH[1] / FOV_RGB[1]) * Y_RGB)) / 2))

    img = img[FOV_DIFF_Y:-FOV_DIFF_Y, FOV_DIFF_X:-FOV_DIFF_X]

    return cv2.resize(img, (X_DEPTH, Y_DEPTH), interpolation=cv2.INTER_AREA)




X_RGB = X_DEPTH = 1280
Y_RGB = 800
Y_DEPTH = 720

FOV_DEPTH = (87, 58)
FOV_RGB = (90, 65)


VIDEO = False

if VIDEO:
    video_name = 'data/video1.avi'
    video_name = 'data/holo4-sikmo-zvrchu-protislun-tam-prostredektraktora.avi'
    reader = VideoLoader(video_name)
else:
    folder_path = "data/set1"
    reader = PictureLoader(folder_path)



while True:
    frame = reader.read_next()



    image_rgb = frame[0:Y_RGB, :]
    image_depth = frame[Y_RGB:, :, 0] * 256 + frame[Y_RGB:, :, 1]

    img_rgb = scale_rgb(image_rgb)

    img = image_depth.copy()
    # kernel = np.ones((5, 5), np.uint8)
    # # ret, img = cv2.threshold(img, 20000, 256*256-1, cv2.THRESH_BINARY)
    # # img = np.clip(img, 30000, 255*256)
    #
    # close_distance = 300
    # img[img < close_distance] = 256*256-1
    # img = cv2.blur(img, (3, 3))

    # img = (img // 256).astype("uint8")
    # img = cv2.equalizeHist(img)

    # img = ~img
    img_orig = img.copy()


    img = cv2.convertScaleAbs(img, alpha=0.05)
    img = ~img
    img[img > 240] = 0

    ret, img = cv2.threshold(img, 50, 255, cv2.THRESH_BINARY)

    # kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
    # img = cv2.erode(img, kernel, iterations=1)

    kernel = np.array([[1, 1, 1],
                        [1, 0, 1],
                        [1, 1, 1]], np.uint8)

    img = cv2.morphologyEx(img, cv2.MORPH_ERODE, kernel)








    # img[img < far_distance] = 0

    # kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
    # img = cv2.erode(img, kernel, iterations=1)
    # img = cv2.blur(img, (5, 5))
    # ret, img = cv2.threshold(img, 200, 255, cv2.THRESH_BINARY)



    # kernel = np.ones((3, 3), np.uint8)


    # kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (9, 9))
    # img = cv2.erode(img, kernel, iterations=1)
    # kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
    # img = cv2.dilate(img, kernel, iterations=1)


    # contours, hierarchy = cv2.findContours(img, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # img_orig = img_rgb

    # img = cv2.dilate(img, kernel, iterations=2)
    # img = cv2.erode(img, kernel, iterations=2)
    # img_orig = cv2.applyColorMap(cv2.convertScaleAbs(image_depth, alpha=0.05), cv2.COLORMAP_JET)
    # img_orig = cv2.convertScaleAbs(image_depth, alpha=0.05)
    # cv2.imshow('Frame', image_depth)

    # mask = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
    # img_orig = cv2.bitwise_and(img_rgb, mask)

    img_orig = img_rgb

    plt.figure(figsize=(20, 10))
    plt.subplot(221)
    plt.imshow(img_orig, cmap="gray")

    plt.subplot(222)
    plt.hist(img_orig.ravel(), bins=100)
    plt.xlim(0, 255)

    plt.subplot(223)
    plt.imshow(img, cmap="gray")

    plt.subplot(224)
    plt.hist(img.ravel(), bins=100)
    plt.xlim(0, 255)

    plt.tight_layout()
    plt.show()

    break

    if cv2.waitKey(25) & 0xFF == ord('q'):
        break

